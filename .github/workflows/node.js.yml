name: Node.js CI/CD
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Clean runner temp files
        run: |
          sudo rm -rf /home/ubuntu/actions-runner/_work/_temp/_runner_file_commands/* 2>/dev/null || true
          sudo mkdir -p /home/ubuntu/actions-runner/_work/_temp/_runner_file_commands
          sudo chmod 755 /home/ubuntu/actions-runner/_work/_temp/_runner_file_commands
        continue-on-error: true

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          clean: true

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-build-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci --legacy-peer-deps

      - name: Create .env file
        run: |
          if [ -n "${{ secrets.PROD_ENV_FILE }}" ]; then
            echo "${{ secrets.PROD_ENV_FILE }}" > .env
          else
            echo "Warning: PROD_ENV_FILE secret not found"
            cp .env.example .env 2>/dev/null || echo "No .env.example found"
          fi

      - name: Setup CloudFront private key
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" ]; then
            mkdir -p $(dirname "${{ secrets.CLOUDFRONT_PRIVATE_KEY_PATH || 'private_key.pem' }}")
            echo "${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" > "${{ secrets.CLOUDFRONT_PRIVATE_KEY_PATH || 'private_key.pem' }}"
            chmod 600 "${{ secrets.CLOUDFRONT_PRIVATE_KEY_PATH || 'private_key.pem' }}"
            echo "CloudFront private key created successfully"
          else
            echo "Warning: CLOUDFRONT_PRIVATE_KEY secret not found - CloudFront signing will be disabled"
          fi

      - name: Build application
        run: npm run build --if-present

      - name: Install PM2 globally
        run: npm install -g pm2@latest

      # New step: rename CommonJS ecosystem file so PM2 loads it under ESM mode
      - name: Rename PM2 config to .cjs
        run: |
          if [ -f ecosystem.config.js ]; then
            mv ecosystem.config.js ecosystem.config.cjs
          fi

      - name: Restart PM2 Processes
        run: |
          if command -v pm2 &> /dev/null; then
            pm2 restart all || pm2 start ecosystem.config.cjs --env production
          else
            echo "PM2 not found after install"
            exit 1
          fi

      - name: CORS Configuration Instructions
        run: |
          echo "=================================================="
          echo "IMPORTANT: If CORS issues persist after deployment"
          echo "=================================================="
          echo "1. Check if you're using Nginx/Apache as a reverse proxy"
          echo "2. If using Nginx, apply the configuration from nginx-cors.conf"
          echo "3. Restart your web server after making changes"
          echo "4. Check firewall rules to ensure cross-origin requests are allowed"
          echo "5. Verify DNS configuration for api.medh.co is pointing to the correct server"
          echo "=================================================="