{
  "collection": {
    "item": [
      {
        "id": "42f8bc23-0f79-42bc-b9a8-8f319c921178",
        "name": "Authentication",
        "item": [
          {
            "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
            "name": "Instructor Login",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response has token\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "    pm.expect(json.data.token).to.exist;",
                    "    pm.collectionVariables.set('instructor_token', json.data.token);",
                    "    // Set as global for this session",
                    "    pm.globals.set('instructor_token', json.data.token);",
                    "});"
                  ],
                  "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
        "name": "Instructor Dashboard",
        "item": [
          {
            "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
            "name": "Get Instructor Courses",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "courses"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Courses is array\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.be.an('array');",
                    "});",
                    "pm.test(\"Set course_id for further tests\", () => {",
                    "    const json = pm.response.json();",
                    "    if (json.data && json.data.length > 0) {",
                    "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                }
              }
            ]
          },
          {
            "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
            "name": "Get Course Students",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "students",
                  "{{course_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Students is array\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.be.an('array');",
                    "});",
                    "pm.test(\"Set student_id for further tests\", () => {",
                    "    const json = pm.response.json();",
                    "    if (json.data && json.data.length > 0) {",
                    "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                }
              }
            ]
          },
          {
            "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
            "name": "Get Instructor Dashboard Stats",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "dashboard",
                  "stats"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Stats data exists\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8598d07a-e308-4d93-8748-3add63b84709",
        "name": "Attendance Management",
        "item": [
          {
            "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
            "name": "Get Batch Attendance",
            "request": {
              "url": {
                "path": [
                  "attendance",
                  "batch",
                  "{{batch_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Attendance data exists\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                }
              }
            ]
          },
          {
            "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
            "name": "Mark Student Attendance",
            "request": {
              "url": {
                "path": [
                  "attendance",
                  "mark"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 201\", () => {",
                    "    pm.expect([200, 201]).to.include(pm.response.code);",
                    "});",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Attendance record created\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                }
              }
            ]
          },
          {
            "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
            "name": "Update Attendance",
            "request": {
              "url": {
                "path": [
                  "attendance",
                  "{{attendance_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Attendance updated\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
        "name": "Revenue Management",
        "item": [
          {
            "id": "183c4635-7b9b-4007-b9b4-e83960648339",
            "name": "Get Instructor Revenue Stats",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "revenue",
                  "stats"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Revenue data exists\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                }
              }
            ]
          },
          {
            "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
            "name": "Get Monthly Revenue",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "revenue",
                  "monthly"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Monthly revenue data exists\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                }
              }
            ]
          },
          {
            "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
            "name": "Get Revenue Details",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "revenue",
                  "details"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "startDate",
                    "value": "2024-01-01"
                  },
                  {
                    "key": "endDate",
                    "value": "2024-12-31"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Revenue details exist\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
        "name": "Course Management",
        "item": [
          {
            "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
            "name": "Get Course Details",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "courses",
                  "{{course_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Course details exist\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.exist;",
                    "    pm.expect(json.data._id).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                }
              }
            ]
          },
          {
            "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
            "name": "Get Course Batches",
            "request": {
              "url": {
                "path": [
                  "instructors",
                  "courses",
                  "{{course_id}}",
                  "batches"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{instructor_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                    "pm.test(\"Response success is true\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.success).to.be.true;",
                    "});",
                    "pm.test(\"Batches is array\", () => {",
                    "    const json = pm.response.json();",
                    "    pm.expect(json.data).to.be.an('array');",
                    "});",
                    "pm.test(\"Set batch_id for further tests\", () => {",
                    "    const json = pm.response.json();",
                    "    if (json.data && json.data.length > 0) {",
                    "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080/api/v1",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "",
        "key": "instructor_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "course_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "batch_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "student_id"
      },
      {
        "type": "string",
        "value": "dummy-attendance-id",
        "key": "attendance_id"
      }
    ],
    "info": {
      "_postman_id": "bfb0365f-e7be-4185-8d9b-fa31be1e3c6c",
      "name": "Instructor API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive test suite for Instructor API endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "0cd98049-b16e-4701-b33c-523564341bf6",
    "values": []
  },
  "globals": {
    "id": "7a0f9c43-a2fa-4529-851e-acabb2ff5e1b",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 12
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 38,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1750795424827,
      "completed": 1750795425042
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adb09970-d84b-4f81-8894-a50d30136cc1",
          "httpRequestId": "92a6f9a7-0b97-4b58-ac7b-4baf1037d4e5"
        },
        "item": {
          "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
          "name": "Instructor Login",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has token\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data.token).to.exist;",
                  "    pm.collectionVariables.set('instructor_token', json.data.token);",
                  "    // Set as global for this session",
                  "    pm.globals.set('instructor_token', json.data.token);",
                  "});"
                ],
                "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "79cfe6ad-3015-4bb1-9f08-dae1e13e07c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
          }
        },
        "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has token",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c"
        },
        "item": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "courses"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0c3eca6-27e8-4153-8ee7-c63a35b422af",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Courses is array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Courses is array",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Set course_id for further tests",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Set course_id for further tests",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e"
        },
        "item": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "path": [
                "instructors",
                "students",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "students",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "186b8f9d-0f3e-4918-be19-ae80b8cd74df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Students is array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Students is array",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Set student_id for further tests",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Set student_id for further tests",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f4184f2-0e04-49e6-838b-6fef35a31c5d",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830dfd4c-6906-4a45-85fd-ff5e30b66eb7"
        },
        "item": {
          "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
          "name": "Get Instructor Dashboard Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "dashboard",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Stats data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "dashboard",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc2733f1-b523-438f-ab6e-8fa7e3fe08c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Stats data exists",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Stats data exists",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2b544898-bd2b-46e9-9fcf-55738ff8e659",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3476b2a8-429c-448b-a7d7-4a8fba284a96"
        },
        "item": {
          "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
          "name": "Get Batch Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "batch",
                "{{batch_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "attendance",
              "batch",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "524c7d1c-ce74-4530-bd5a-2a7f025df77c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Attendance data exists",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Attendance data exists",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "60201a62-efec-41af-8dc5-d9c94fbace5b",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0594d0b-4cbb-4825-968e-99a1bb79b391"
        },
        "item": {
          "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
          "name": "Mark Student Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "mark"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", () => {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance record created\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "attendance",
              "mark"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38bd30f9-f021-41b7-a6f6-557d6de1d6d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"studentId\": \"\",\n  \"batchId\": \"\",\n  \"status\": \"present\",\n  \"date\": \"2025-06-24T20:03:44.937Z\"\n}"
          }
        },
        "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Attendance record created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Attendance record created",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "073ea879-bb1f-4b78-8c50-13939697bc6a",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53cb0637-8340-4ca0-b091-80e3c2f6dac7"
        },
        "item": {
          "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
          "name": "Update Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "{{attendance_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance updated\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "attendance",
              "dummy-attendance-id"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bfdf6c9f-875b-4ca3-baf5-9775a9426214",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
          }
        },
        "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)"
            }
          },
          {
            "assertion": "Attendance updated",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Attendance updated",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "49813588-0fbf-41ea-aec6-f1a4441781f4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea22ce37-6ca4-4d9a-add9-beb8996bfb6a"
        },
        "item": {
          "id": "183c4635-7b9b-4007-b9b4-e83960648339",
          "name": "Get Instructor Revenue Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "revenue",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b2a45cd4-6d97-4839-a7dd-b876aed5b3ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "183c4635-7b9b-4007-b9b4-e83960648339",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Revenue data exists",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Revenue data exists",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "91662485-68dc-4e0d-b913-450ced5ac54d",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8514e3c9-d1b2-488a-af45-0ee557fd4808"
        },
        "item": {
          "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
          "name": "Get Monthly Revenue",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "monthly"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Monthly revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "revenue",
              "monthly"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c8e058c4-677d-4e80-8dc4-8bb370e46b7a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Monthly revenue data exists",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Monthly revenue data exists",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "25c27f06-b145-4bd7-bad3-8d094070f34b",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "216ae110-1f9e-433c-a8d4-63061a8b29d2"
        },
        "item": {
          "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
          "name": "Get Revenue Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "details"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "revenue",
              "details"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "startDate",
                "value": "2024-01-01"
              },
              {
                "key": "endDate",
                "value": "2024-12-31"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d31fcba5-cec6-4a9b-92f8-e38bb826b110",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Revenue details exist",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Revenue details exist",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5241df11-5078-469b-97af-09dfe1a138ed",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b47dfac7-9053-4170-8a22-441e98dd43ef"
        },
        "item": {
          "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
          "name": "Get Course Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Course details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "    pm.expect(json.data._id).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "courses",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e7344cc9-5dde-4771-bbb2-28e5ba12dabd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)"
            }
          },
          {
            "assertion": "Course details exist",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Course details exist",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323"
        },
        "item": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}",
                "batches"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "v1",
              "instructors",
              "courses",
              "",
              "batches"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "689bcc0e-e302-46d4-886a-0d7bd3123e5e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response success is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response success is true",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Batches is array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Batches is array",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:12)"
            }
          },
          {
            "assertion": "Set batch_id for further tests",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Set batch_id for further tests",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:12)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "8a2aeb6e-a5da-440d-b371-b71fc8280007",
          "timestamp": 1750795424850,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
          "name": "Instructor Login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "79cfe6ad-3015-4bb1-9f08-dae1e13e07c8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has token\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data.token).to.exist;",
                  "    pm.collectionVariables.set('instructor_token', json.data.token);",
                  "    // Set as global for this session",
                  "    pm.globals.set('instructor_token', json.data.token);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adb09970-d84b-4f81-8894-a50d30136cc1",
          "httpRequestId": "92a6f9a7-0b97-4b58-ac7b-4baf1037d4e5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "8f1a38fbb4708623aafe992d2647a097",
          "id": "80a4c120-3cb5-4050-83a0-0eee885a2891",
          "timestamp": 1750795424864,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
          "name": "Instructor Login",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has token\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data.token).to.exist;",
                  "    pm.collectionVariables.set('instructor_token', json.data.token);",
                  "    // Set as global for this session",
                  "    pm.globals.set('instructor_token', json.data.token);",
                  "});"
                ],
                "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
              }
            }
          ]
        },
        "parent": {
          "id": "42f8bc23-0f79-42bc-b9a8-8f319c921178",
          "name": "Authentication",
          "item": [
            {
              "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
              "name": "Instructor Login",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response has token\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data.token).to.exist;",
                      "    pm.collectionVariables.set('instructor_token', json.data.token);",
                      "    // Set as global for this session",
                      "    pm.globals.set('instructor_token', json.data.token);",
                      "});"
                    ],
                    "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adb09970-d84b-4f81-8894-a50d30136cc1",
          "httpRequestId": "92a6f9a7-0b97-4b58-ac7b-4baf1037d4e5",
          "scriptId": "84dfe951-8187-4137-a5b3-f209c521a7ff",
          "execution": "d18f66a2-931c-4e1e-965e-e9a763118c71"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has token",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "50d78e927383a72425d3b2cb3428b2da",
          "id": "6a40aa0e-e7f7-4bd9-ac64-8e2071bd69bc",
          "timestamp": 1750795424866,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
          "name": "Instructor Login",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response has token\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "    pm.expect(json.data.token).to.exist;",
                  "    pm.collectionVariables.set('instructor_token', json.data.token);",
                  "    // Set as global for this session",
                  "    pm.globals.set('instructor_token', json.data.token);",
                  "});"
                ],
                "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
              }
            }
          ]
        },
        "parent": {
          "id": "42f8bc23-0f79-42bc-b9a8-8f319c921178",
          "name": "Authentication",
          "item": [
            {
              "id": "e02982dc-45b8-4a43-931e-c191af64ec00",
              "name": "Instructor Login",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"instructor@medh.co\",\n  \"password\": \"Instructor@123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84dfe951-8187-4137-a5b3-f209c521a7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response has token\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "    pm.expect(json.data.token).to.exist;",
                      "    pm.collectionVariables.set('instructor_token', json.data.token);",
                      "    // Set as global for this session",
                      "    pm.globals.set('instructor_token', json.data.token);",
                      "});"
                    ],
                    "_lastExecutionId": "d18f66a2-931c-4e1e-965e-e9a763118c71"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adb09970-d84b-4f81-8894-a50d30136cc1",
          "httpRequestId": "92a6f9a7-0b97-4b58-ac7b-4baf1037d4e5",
          "scriptId": "84dfe951-8187-4137-a5b3-f209c521a7ff",
          "execution": "d18f66a2-931c-4e1e-965e-e9a763118c71"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "c2227f17-9dab-4c02-8774-8d0adc35adf1",
          "timestamp": 1750795424885,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "courses"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d0c3eca6-27e8-4153-8ee7-c63a35b422af",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "169020131664477cec85b1c00a6464f6",
          "id": "be412408-b076-4037-9a48-125ee99b80fa",
          "timestamp": 1750795424889,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c",
          "scriptId": "0502c355-ee9c-4a83-b868-efa8403cc37b",
          "execution": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "2b144e8228eae2e917810efece9986a1",
          "id": "68bb51a9-bdda-43ad-8476-fcf7a4dd52f6",
          "timestamp": 1750795424890,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c",
          "scriptId": "0502c355-ee9c-4a83-b868-efa8403cc37b",
          "execution": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Courses is array",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "1a693e71dea436670d64c827c0ccc91e",
          "id": "7665db2c-be32-4980-b794-c60108163c63",
          "timestamp": 1750795424891,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c",
          "scriptId": "0502c355-ee9c-4a83-b868-efa8403cc37b",
          "execution": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Set course_id for further tests",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "cacd7d7112c9b714ec16d4092e238843",
          "id": "f3f33eca-1324-4b03-bd37-f2b683348ba8",
          "timestamp": 1750795424891,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
          "name": "Get Instructor Courses",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Courses is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set course_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d107b76d-7b98-466f-9ae5-f4dec8c06e10",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ce3c06bb-ce78-4740-8935-de00c1c2995c",
          "scriptId": "0502c355-ee9c-4a83-b868-efa8403cc37b",
          "execution": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "5ad76ea1-e583-49e4-96ec-313977af60d3",
          "timestamp": 1750795424900,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "students",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "186b8f9d-0f3e-4918-be19-ae80b8cd74df",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "470ce06f8bb94c3fa9bc0a37723a5549",
          "id": "c84fb42f-57af-4787-864d-dee7c6a6eb00",
          "timestamp": 1750795424904,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "path": [
                "instructors",
                "students",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e",
          "scriptId": "400b5953-492d-4290-b60c-ed5327a0459b",
          "execution": "241350a6-255a-4720-b6bf-b086c8d06368"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "e77c4bfab2b1415df57dcbaffac2f0f7",
          "id": "32496839-9055-43f6-869a-f8f8bd2f8d01",
          "timestamp": 1750795424905,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "path": [
                "instructors",
                "students",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e",
          "scriptId": "400b5953-492d-4290-b60c-ed5327a0459b",
          "execution": "241350a6-255a-4720-b6bf-b086c8d06368"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Students is array",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "fccf3bd358452524d988f432a8a45dca",
          "id": "c10a7fbf-3f41-4e34-8612-4c219fd1b8b1",
          "timestamp": 1750795424905,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "path": [
                "instructors",
                "students",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e",
          "scriptId": "400b5953-492d-4290-b60c-ed5327a0459b",
          "execution": "241350a6-255a-4720-b6bf-b086c8d06368"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Set student_id for further tests",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "0efe002916441436b0bbe3865a9a284d",
          "id": "27fcd12c-fa4a-4545-aeb5-dcfcd883e7be",
          "timestamp": 1750795424905,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
          "name": "Get Course Students",
          "request": {
            "url": {
              "path": [
                "instructors",
                "students",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Students is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set student_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2aaa59b1-59f7-4873-ac5d-ddfc707b404b",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e066378-9762-4cbb-a369-77a526e5465e",
          "scriptId": "400b5953-492d-4290-b60c-ed5327a0459b",
          "execution": "241350a6-255a-4720-b6bf-b086c8d06368"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "283dc9e6-e901-4221-b547-674d47eeb6d8",
          "timestamp": 1750795424913,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
          "name": "Get Instructor Dashboard Stats",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "dashboard",
                "stats"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "dc2733f1-b523-438f-ab6e-8fa7e3fe08c8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Stats data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3f4184f2-0e04-49e6-838b-6fef35a31c5d",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830dfd4c-6906-4a45-85fd-ff5e30b66eb7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5e78bc18623b85feb0a8ad40f56e64fc",
          "id": "e8ba2941-1446-4cdd-b9a3-522db9b30998",
          "timestamp": 1750795424916,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
          "name": "Get Instructor Dashboard Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "dashboard",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Stats data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3f4184f2-0e04-49e6-838b-6fef35a31c5d",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830dfd4c-6906-4a45-85fd-ff5e30b66eb7",
          "scriptId": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
          "execution": "f1789d46-db46-46fc-b53e-4512af9259fb"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "711322fdaa44c9faf37bfe6786c1ec63",
          "id": "51dc77b8-70bd-4870-808e-95b7b968935b",
          "timestamp": 1750795424917,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
          "name": "Get Instructor Dashboard Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "dashboard",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Stats data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3f4184f2-0e04-49e6-838b-6fef35a31c5d",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830dfd4c-6906-4a45-85fd-ff5e30b66eb7",
          "scriptId": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
          "execution": "f1789d46-db46-46fc-b53e-4512af9259fb"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Stats data exists",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "6ae763376fd4ca031d3c5de40ea88693",
          "id": "dedb5fb5-a428-4b83-bec6-406cf581dfbc",
          "timestamp": 1750795424917,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
          "name": "Get Instructor Dashboard Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "dashboard",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Stats data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
              }
            }
          ]
        },
        "parent": {
          "id": "8d671b80-81d7-4ec8-9e36-b24639427290",
          "name": "Instructor Dashboard",
          "item": [
            {
              "id": "fc784ba6-6a3e-48d5-ab06-04e8cd294da7",
              "name": "Get Instructor Courses",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0502c355-ee9c-4a83-b868-efa8403cc37b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Courses is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set course_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('course_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d30feb39-d5e9-4f75-82a2-2e8e804b4eda"
                  }
                }
              ]
            },
            {
              "id": "d1174db8-b5ed-493a-bca8-e10ad5a7b7b8",
              "name": "Get Course Students",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "students",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400b5953-492d-4290-b60c-ed5327a0459b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Students is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set student_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('student_id', json.data[0].student._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "241350a6-255a-4720-b6bf-b086c8d06368"
                  }
                }
              ]
            },
            {
              "id": "d5a86957-e44a-49b6-891c-0df58c3dcf8e",
              "name": "Get Instructor Dashboard Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "dashboard",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Stats data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "f1789d46-db46-46fc-b53e-4512af9259fb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3f4184f2-0e04-49e6-838b-6fef35a31c5d",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830dfd4c-6906-4a45-85fd-ff5e30b66eb7",
          "scriptId": "4a020a9f-8874-419b-8a6a-2a6bceca5b5a",
          "execution": "f1789d46-db46-46fc-b53e-4512af9259fb"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "d1d096b3-a415-48ca-94e6-6d0a77321b07",
          "timestamp": 1750795424926,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
          "name": "Get Batch Attendance",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "attendance",
                "batch",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "524c7d1c-ce74-4530-bd5a-2a7f025df77c",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2b544898-bd2b-46e9-9fcf-55738ff8e659",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3476b2a8-429c-448b-a7d7-4a8fba284a96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "069f20f87cf5d2c50296503d3aba1045",
          "id": "6f5133e9-b2ea-4253-93ea-9f5fc5c31d12",
          "timestamp": 1750795424930,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
          "name": "Get Batch Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "batch",
                "{{batch_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b544898-bd2b-46e9-9fcf-55738ff8e659",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3476b2a8-429c-448b-a7d7-4a8fba284a96",
          "scriptId": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
          "execution": "27c869ae-092e-4161-a55a-602d9fbd0a72"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "e0e630321891ce79fbaf37f75ba8f294",
          "id": "473ba232-e2c0-4488-ac0f-831b9f056fd7",
          "timestamp": 1750795424930,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
          "name": "Get Batch Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "batch",
                "{{batch_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b544898-bd2b-46e9-9fcf-55738ff8e659",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3476b2a8-429c-448b-a7d7-4a8fba284a96",
          "scriptId": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
          "execution": "27c869ae-092e-4161-a55a-602d9fbd0a72"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Attendance data exists",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "c02dfd1433aa174fa605553baceb2134",
          "id": "8f08732a-0e3d-48ab-85e1-c62d106d1ecd",
          "timestamp": 1750795424930,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
          "name": "Get Batch Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "batch",
                "{{batch_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b544898-bd2b-46e9-9fcf-55738ff8e659",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3476b2a8-429c-448b-a7d7-4a8fba284a96",
          "scriptId": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
          "execution": "27c869ae-092e-4161-a55a-602d9fbd0a72"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "09cc95f7-7623-45c0-817d-90bbc3cdfeb8",
          "timestamp": 1750795424940,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
          "name": "Mark Student Attendance",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "attendance",
                "mark"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "38bd30f9-f021-41b7-a6f6-557d6de1d6d3",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"studentId\": \"\",\n  \"batchId\": \"\",\n  \"status\": \"present\",\n  \"date\": \"2025-06-24T20:03:44.937Z\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", () => {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance record created\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "60201a62-efec-41af-8dc5-d9c94fbace5b",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0594d0b-4cbb-4825-968e-99a1bb79b391"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "7f38232b010ee62154ef20c5d7ea4a30",
          "id": "65288ceb-fe51-43be-958e-f7f3a11deeac",
          "timestamp": 1750795424944,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
          "name": "Mark Student Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "mark"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", () => {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance record created\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "60201a62-efec-41af-8dc5-d9c94fbace5b",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0594d0b-4cbb-4825-968e-99a1bb79b391",
          "scriptId": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
          "execution": "c1a66804-be50-4d37-816e-9b92cf66af8c"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d084d2001e44347317d5fdec1bcfd32a",
          "id": "ef82faba-d073-43cf-a5d5-fc05899f3936",
          "timestamp": 1750795424944,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
          "name": "Mark Student Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "mark"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", () => {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance record created\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "60201a62-efec-41af-8dc5-d9c94fbace5b",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0594d0b-4cbb-4825-968e-99a1bb79b391",
          "scriptId": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
          "execution": "c1a66804-be50-4d37-816e-9b92cf66af8c"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Attendance record created",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "bf2fec6c7885e9ff2f9e50eb78ccecf3",
          "id": "3e89d927-dc98-449e-8f51-a46c981a31db",
          "timestamp": 1750795424945,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
          "name": "Mark Student Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "mark"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", () => {",
                  "    pm.expect([200, 201]).to.include(pm.response.code);",
                  "});",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance record created\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "60201a62-efec-41af-8dc5-d9c94fbace5b",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0594d0b-4cbb-4825-968e-99a1bb79b391",
          "scriptId": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
          "execution": "c1a66804-be50-4d37-816e-9b92cf66af8c"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "4929df4c-cfa0-472d-9d09-59d3194c1243",
          "timestamp": 1750795424954,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
          "name": "Update Attendance",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "attendance",
                "dummy-attendance-id"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bfdf6c9f-875b-4ca3-baf5-9775a9426214",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance updated\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "073ea879-bb1f-4b78-8c50-13939697bc6a",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53cb0637-8340-4ca0-b091-80e3c2f6dac7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "cceaa75a111dfd6afb1dcf3ec5edba7f",
          "id": "efb448ae-a55f-4c4a-85d5-9938669adcfb",
          "timestamp": 1750795424957,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
          "name": "Update Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "{{attendance_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance updated\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "073ea879-bb1f-4b78-8c50-13939697bc6a",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53cb0637-8340-4ca0-b091-80e3c2f6dac7",
          "scriptId": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
          "execution": "0d931386-f6ae-4434-9e63-d741220809c3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "12d605668a92afc1780d60b9d3006fb7",
          "id": "b02f68eb-7010-4981-a988-11941ae14596",
          "timestamp": 1750795424957,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
          "name": "Update Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "{{attendance_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance updated\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "073ea879-bb1f-4b78-8c50-13939697bc6a",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53cb0637-8340-4ca0-b091-80e3c2f6dac7",
          "scriptId": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
          "execution": "0d931386-f6ae-4434-9e63-d741220809c3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Attendance updated",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:7)",
          "checksum": "787a71d9bec15eaf431da3b4bb31adb0",
          "id": "4768e862-cbcc-4d71-aadd-6dcbbb81a4b2",
          "timestamp": 1750795424957,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
          "name": "Update Attendance",
          "request": {
            "url": {
              "path": [
                "attendance",
                "{{attendance_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Attendance updated\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
              }
            }
          ]
        },
        "parent": {
          "id": "8598d07a-e308-4d93-8748-3add63b84709",
          "name": "Attendance Management",
          "item": [
            {
              "id": "38ac9ff8-cf86-46c8-967e-9e4a2c8898a9",
              "name": "Get Batch Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "batch",
                    "{{batch_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cb8143d-12c7-4bcf-97bf-5e0f38d9d0a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "27c869ae-092e-4161-a55a-602d9fbd0a72"
                  }
                }
              ]
            },
            {
              "id": "c0b0a39a-b3bf-4c14-aa3c-7adbb84f6fad",
              "name": "Mark Student Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "mark"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"studentId\": \"{{student_id}}\",\n  \"batchId\": \"{{batch_id}}\",\n  \"status\": \"present\",\n  \"date\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36d67f0d-9d9a-4ff3-8950-1807c4deeb7b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 201\", () => {",
                      "    pm.expect([200, 201]).to.include(pm.response.code);",
                      "});",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance record created\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c1a66804-be50-4d37-816e-9b92cf66af8c"
                  }
                }
              ]
            },
            {
              "id": "f6f4defa-a307-4ef1-abc8-a2956ca347bf",
              "name": "Update Attendance",
              "request": {
                "url": {
                  "path": [
                    "attendance",
                    "{{attendance_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"absent\",\n  \"notes\": \"Updated attendance status\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Attendance updated\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "0d931386-f6ae-4434-9e63-d741220809c3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "073ea879-bb1f-4b78-8c50-13939697bc6a",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53cb0637-8340-4ca0-b091-80e3c2f6dac7",
          "scriptId": "4248e5e0-df32-4435-98bb-d1b5a44a8544",
          "execution": "0d931386-f6ae-4434-9e63-d741220809c3"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "0ef53d84-a30e-4e5b-b6cd-9726fc59cd8e",
          "timestamp": 1750795424967,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "183c4635-7b9b-4007-b9b4-e83960648339",
          "name": "Get Instructor Revenue Stats",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "revenue",
                "stats"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b2a45cd4-6d97-4839-a7dd-b876aed5b3ff",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "49813588-0fbf-41ea-aec6-f1a4441781f4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea22ce37-6ca4-4d9a-add9-beb8996bfb6a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "685d167932608e4ac32feacd43beb324",
          "id": "e61c0cfe-dc11-4f30-8f79-38c7b69ff135",
          "timestamp": 1750795424971,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "183c4635-7b9b-4007-b9b4-e83960648339",
          "name": "Get Instructor Revenue Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "49813588-0fbf-41ea-aec6-f1a4441781f4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea22ce37-6ca4-4d9a-add9-beb8996bfb6a",
          "scriptId": "2d38ea30-f30f-45e5-b57a-63025ec22250",
          "execution": "fe527e54-94e7-4496-bb38-4bc41e233c57"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "c86fc74c1d2edfbf5929e2b8c3976203",
          "id": "3688f1d4-1f46-48dc-88dc-d1acaf408f78",
          "timestamp": 1750795424971,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "183c4635-7b9b-4007-b9b4-e83960648339",
          "name": "Get Instructor Revenue Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "49813588-0fbf-41ea-aec6-f1a4441781f4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea22ce37-6ca4-4d9a-add9-beb8996bfb6a",
          "scriptId": "2d38ea30-f30f-45e5-b57a-63025ec22250",
          "execution": "fe527e54-94e7-4496-bb38-4bc41e233c57"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Revenue data exists",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "738b3b3e2bc9853bef0b282bb55b3e53",
          "id": "d4f11819-d814-497a-af21-e40a7a8d9761",
          "timestamp": 1750795424972,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "183c4635-7b9b-4007-b9b4-e83960648339",
          "name": "Get Instructor Revenue Stats",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "stats"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "49813588-0fbf-41ea-aec6-f1a4441781f4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea22ce37-6ca4-4d9a-add9-beb8996bfb6a",
          "scriptId": "2d38ea30-f30f-45e5-b57a-63025ec22250",
          "execution": "fe527e54-94e7-4496-bb38-4bc41e233c57"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "77516ff7-6549-4386-bca2-bb56b2d082b8",
          "timestamp": 1750795424985,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
          "name": "Get Monthly Revenue",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "revenue",
                "monthly"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c8e058c4-677d-4e80-8dc4-8bb370e46b7a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Monthly revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "91662485-68dc-4e0d-b913-450ced5ac54d",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8514e3c9-d1b2-488a-af45-0ee557fd4808"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "3c8b6d0f45100a696bd28f8ebac2fd43",
          "id": "a38a6225-eb72-42ad-9c87-7445a2402ac6",
          "timestamp": 1750795424990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
          "name": "Get Monthly Revenue",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "monthly"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Monthly revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91662485-68dc-4e0d-b913-450ced5ac54d",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8514e3c9-d1b2-488a-af45-0ee557fd4808",
          "scriptId": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
          "execution": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "c641366c8041b2d3179e1656046d5d8c",
          "id": "303e5f87-81c0-49a6-b81c-4a24da433eb3",
          "timestamp": 1750795424990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
          "name": "Get Monthly Revenue",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "monthly"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Monthly revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91662485-68dc-4e0d-b913-450ced5ac54d",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8514e3c9-d1b2-488a-af45-0ee557fd4808",
          "scriptId": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
          "execution": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Monthly revenue data exists",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:9)",
          "checksum": "d1f768abdbfbd5c1b0d95f0968f38b20",
          "id": "3f8423d4-aa93-4e49-9bec-eb563ed02cfa",
          "timestamp": 1750795424990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
          "name": "Get Monthly Revenue",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "monthly"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Monthly revenue data exists\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91662485-68dc-4e0d-b913-450ced5ac54d",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8514e3c9-d1b2-488a-af45-0ee557fd4808",
          "scriptId": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
          "execution": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "96f525f4-4e3b-4d26-a148-cb20d610230c",
          "timestamp": 1750795425001,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
          "name": "Get Revenue Details",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "revenue",
                "details"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d31fcba5-cec6-4a9b-92f8-e38bb826b110",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "25c27f06-b145-4bd7-bad3-8d094070f34b",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "216ae110-1f9e-433c-a8d4-63061a8b29d2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "1532f8dadbbfa79e43ec80ab9ad55a24",
          "id": "6b26e65b-2351-4c93-9621-1d899d3ebf69",
          "timestamp": 1750795425007,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
          "name": "Get Revenue Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "details"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "25c27f06-b145-4bd7-bad3-8d094070f34b",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "216ae110-1f9e-433c-a8d4-63061a8b29d2",
          "scriptId": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
          "execution": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "90cfb2252d592a84f29a2919c9ea7bf6",
          "id": "cd9c8560-b841-49df-9d4c-3fcc66288008",
          "timestamp": 1750795425008,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
          "name": "Get Revenue Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "details"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "25c27f06-b145-4bd7-bad3-8d094070f34b",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "216ae110-1f9e-433c-a8d4-63061a8b29d2",
          "scriptId": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
          "execution": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Revenue details exist",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:10)",
          "checksum": "11e6a0cd5e7c5159399dc99189dfa313",
          "id": "439a426b-1bb2-4a67-a018-08d517a4f9dc",
          "timestamp": 1750795425008,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
          "name": "Get Revenue Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "revenue",
                "details"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Revenue details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
              }
            }
          ]
        },
        "parent": {
          "id": "df2beccf-402b-4df0-a04e-b7e5065b1fa5",
          "name": "Revenue Management",
          "item": [
            {
              "id": "183c4635-7b9b-4007-b9b4-e83960648339",
              "name": "Get Instructor Revenue Stats",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "stats"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d38ea30-f30f-45e5-b57a-63025ec22250",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "fe527e54-94e7-4496-bb38-4bc41e233c57"
                  }
                }
              ]
            },
            {
              "id": "b54d8787-08b6-47db-a33e-1923410c9f45",
              "name": "Get Monthly Revenue",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "monthly"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b51ddc72-0667-4811-9db1-b20f2f5d95a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Monthly revenue data exists\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ead9a940-5cc5-425b-8fdc-3fe29b663e4a"
                  }
                }
              ]
            },
            {
              "id": "6df52218-ba4a-42e8-be67-ad1009230b8e",
              "name": "Get Revenue Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "revenue",
                    "details"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2024-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2024-12-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Revenue details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "25c27f06-b145-4bd7-bad3-8d094070f34b",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "216ae110-1f9e-433c-a8d4-63061a8b29d2",
          "scriptId": "8c19d734-0666-4c1e-ad3a-25af08046c4b",
          "execution": "be47fcb7-4db2-42a8-bbf1-dd0e91b328d1"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "4f654b7d-08e8-40ab-b762-681c491c0974",
          "timestamp": 1750795425019,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
          "name": "Get Course Details",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "courses",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e7344cc9-5dde-4771-bbb2-28e5ba12dabd",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Course details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "    pm.expect(json.data._id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "5241df11-5078-469b-97af-09dfe1a138ed",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b47dfac7-9053-4170-8a22-441e98dd43ef"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "d49b4a32b37d5fba2891d4e14bf27e81",
          "id": "7aae9d4e-5d9a-4b12-87fe-838ccf4cc24f",
          "timestamp": 1750795425024,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
          "name": "Get Course Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Course details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "    pm.expect(json.data._id).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5241df11-5078-469b-97af-09dfe1a138ed",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b47dfac7-9053-4170-8a22-441e98dd43ef",
          "scriptId": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
          "execution": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "a619d40ad363ba82cd4197cb713459d0",
          "id": "50450555-4cef-4637-8c25-cb83628a911d",
          "timestamp": 1750795425024,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
          "name": "Get Course Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Course details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "    pm.expect(json.data._id).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5241df11-5078-469b-97af-09dfe1a138ed",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b47dfac7-9053-4170-8a22-441e98dd43ef",
          "scriptId": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
          "execution": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Course details exist",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:11)",
          "checksum": "a1a169abd1fc5c8a05b1b91090f5b6bb",
          "id": "3559471b-c3e6-45b5-ae85-6acf4e28a9bc",
          "timestamp": 1750795425025,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
          "name": "Get Course Details",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Course details exist\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.exist;",
                  "    pm.expect(json.data._id).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5241df11-5078-469b-97af-09dfe1a138ed",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b47dfac7-9053-4170-8a22-441e98dd43ef",
          "scriptId": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
          "execution": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1634:16)",
          "checksum": "4d1c2dc7d25ff9c1831f83ee4379702f",
          "id": "4ffc5cf6-3592-4d7d-b669-89d63cd75517",
          "timestamp": 1750795425034,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1634,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "v1",
                "instructors",
                "courses",
                "",
                "batches"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer "
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "689bcc0e-e302-46d4-886a-0d7bd3123e5e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "26ca9436e2cebb585c4ad1852ea9c399",
          "id": "e69b8382-29d7-4f3b-9f7b-5f99b9792978",
          "timestamp": 1750795425038,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}",
                "batches"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323",
          "scriptId": "fbe5385d-3c57-4616-94ab-975ae40e866e",
          "execution": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response success is true",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "1fe81543d323a8ab7929c75bfee7a0ab",
          "id": "56ee0843-44f7-4971-9e47-5fd072285672",
          "timestamp": 1750795425038,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}",
                "batches"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323",
          "scriptId": "fbe5385d-3c57-4616-94ab-975ae40e866e",
          "execution": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Batches is array",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:12)",
          "checksum": "47c9d58ca38c204dc272c1dae3d2513a",
          "id": "264598b9-a3ca-4753-8ae1-86c7892af70f",
          "timestamp": 1750795425038,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}",
                "batches"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323",
          "scriptId": "fbe5385d-3c57-4616-94ab-975ae40e866e",
          "execution": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Set batch_id for further tests",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:12)",
          "checksum": "726d2b694e79e44fffe75afeaa6ea901",
          "id": "adc8ee09-54d7-4aef-8b36-3f76eb60d9a2",
          "timestamp": 1750795425039,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
          "name": "Get Course Batches",
          "request": {
            "url": {
              "path": [
                "instructors",
                "courses",
                "{{course_id}}",
                "batches"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{instructor_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response success is true\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.success).to.be.true;",
                  "});",
                  "pm.test(\"Batches is array\", () => {",
                  "    const json = pm.response.json();",
                  "    pm.expect(json.data).to.be.an('array');",
                  "});",
                  "pm.test(\"Set batch_id for further tests\", () => {",
                  "    const json = pm.response.json();",
                  "    if (json.data && json.data.length > 0) {",
                  "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
              }
            }
          ]
        },
        "parent": {
          "id": "cdb7e7c7-0b12-4f9e-a51c-39e94f9c6b56",
          "name": "Course Management",
          "item": [
            {
              "id": "d887805b-a271-43b2-88bc-8d67f88fee4e",
              "name": "Get Course Details",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4086abe-b68b-463c-8b18-cacbd8ef69cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Course details exist\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.exist;",
                      "    pm.expect(json.data._id).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c294ef65-dc6d-4d3c-a30a-ef082bcd4921"
                  }
                }
              ]
            },
            {
              "id": "2a73d537-4739-4f0c-a67d-3960b62f63e5",
              "name": "Get Course Batches",
              "request": {
                "url": {
                  "path": [
                    "instructors",
                    "courses",
                    "{{course_id}}",
                    "batches"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{instructor_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbe5385d-3c57-4616-94ab-975ae40e866e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Response success is true\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.success).to.be.true;",
                      "});",
                      "pm.test(\"Batches is array\", () => {",
                      "    const json = pm.response.json();",
                      "    pm.expect(json.data).to.be.an('array');",
                      "});",
                      "pm.test(\"Set batch_id for further tests\", () => {",
                      "    const json = pm.response.json();",
                      "    if (json.data && json.data.length > 0) {",
                      "        pm.collectionVariables.set('batch_id', json.data[0]._id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72f3026f-65fb-40b1-b6c2-a6ce16033954",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e8d7e08-dd58-4b63-9051-e8b6d6f87323",
          "scriptId": "fbe5385d-3c57-4616-94ab-975ae40e866e",
          "execution": "ad8d5666-e5f9-4357-bbf8-226bb5f6acef"
        }
      }
    ],
    "error": null
  }
}